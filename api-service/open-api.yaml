openapi: 3.1.0
info:
  version: '1.0'
  title: quarkus-demo-api
  summary: Quarkus api for Person CRUD operations
  description: Quarkus api for Person CRUD operations
  contact:
    name: Denys
    url: 'https://github.com/DenysFlnk'
    email: filonenko.denys94@gmail.com
  license:
    url: 'https://github.com/DenysFlnk'
    name: 'Free license '
servers:
  - url: 'http://localhost:8080'
    description: Person-api
paths:
  '/quarkus-demo-api/persons/{id}':
    get:
      tags:
        - person-controller
      summary: Get Person Info by id
      description: Retrieve the information of the person with the matching person ID.
      operationId: get-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person Not Found
    put:
      tags:
        - person-controller
      summary: Update Person Information
      description: Update the information of an existing person.
      operationId: update-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      requestBody:
        description: Patch user properties to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '204':
          description: No Content
        '404':
          description: Person Not Found
    delete:
      tags:
        - person-controller
      summary: Delete Person by id
      description: Delete Person by matching Person id
      operationId: delete-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Person Not Found
  /quarkus-demo-api/persons:
    post:
      tags:
        - person-controller
      summary: Create New Person
      description: Create a new Person
      operationId: create-person
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
            examples:
              Example 1:
                value:
                  firstName: Harry
                  lastName: Potter
                  age: 39
                  registrationDate: '2001-01-01'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
              examples:
                New User Bob Fellow:
                  value:
                    id: 4
                    firstName: Harry
                    lastName: Potter
                    age: 39
                    registrationDate: '2001-01-01'
        '400':
          description: Missing Required Information
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    get:
      tags:
        - person-controller
      summary: Get list of Persons
      description: Get list of Persons
      operationId: get-all-persons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
tags:
  - name: person-controller
components:
  schemas:
    Person:
      type: object
      title: Person
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int32
        registrationDateTimestamp:
          type: integer
          format: int64
      required:
        - id
        - firstName
        - lastName
        - age
        - registrationDateTimestamp
    PersonCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
        registrationDateTimestamp:
          type: integer
          format: int64
      required:
        - firstName
        - lastName
        - age
        - registrationDateTimestamp
