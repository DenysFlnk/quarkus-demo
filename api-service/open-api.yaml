openapi: 3.1.0
info:
  version: '1.0'
  title: quarkus-demo-api
  summary: Quarkus api for Person CRUD operations
  description: Quarkus api for Person CRUD operations
  contact:
    name: Denys
    url: 'https://github.com/DenysFlnk'
    email: filonenko.denys94@gmail.com
  license:
    url: 'https://github.com/DenysFlnk'
    name: 'Free license '
servers:
  - url: 'http://localhost:8080'
    description: Person-api
paths:
  '/quarkus-demo-api/persons/{id}':
    get:
      tags:
        - person-controller
      summary: Get Person Info by id
      description: Retrieve the information of the person with the matching person ID.
      operationId: get-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person Not Found
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    put:
      tags:
        - person-controller
      summary: Update Person Information
      description: Update the information of an existing person.
      operationId: update-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      requestBody:
        description: Patch user properties to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '204':
          description: No Content
        '404':
          description: Person Not Found
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    delete:
      tags:
        - person-controller
      summary: Delete Person by id
      description: Delete Person by matching Person id
      operationId: delete-person
      parameters:
        - name: id
          in: path
          description: persons id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Person Not Found
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  /quarkus-demo-api/persons:
    post:
      tags:
        - person-controller
      summary: Create New Person
      description: Create a new Person
      operationId: create-person
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
            examples:
              Example 1:
                value:
                  firstName: Harry
                  lastName: Potter
                  age: 39
                  registrationDate: '2001-01-01'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    get:
      tags:
        - person-controller
      summary: Get list of Persons
      description: Get list of Persons
      operationId: get-all-persons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  '/quarkus-demo-api/persons/hobby/{hobby}':
    get:
      tags:
        - person-controller
      summary: Get list of Persons by Hobby
      description: Get list of Persons by selected Hobby
      operationId: get-all-persons-by-hobby
      parameters:
        - name: hobby
          in: path
          description: Persons selected hobby
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  /quarkus-demo-api/hobbies:
    get:
      tags:
        - hobby-controller
      summary: Get all Hobbies
      description: Get all Hobbies
      operationId: get-all-hobbies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hobby'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    post:
      tags:
        - hobby-controller
      summary: Create Hobby
      description: Create new Hobby
      operationId: create-hobby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HobbyCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hobby'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  '/quarkus-demo-api/hobbies/{id}':
    get:
      tags:
        - hobby-controller
      summary: Get Hobby by Id
      description: Get Hobby by Id
      operationId: get-hobby
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hobby'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    put:
      tags:
        - hobby-controller
      summary: Update Hobby
      description: Update Hobby
      operationId: update-hobby
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hobby'
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    delete:
      tags:
        - hobby-controller
      summary: Delete Hobby by Id
      description: Delete Hobby by Id
      operationId: delete-hobby
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  /quarkus-demo-api/shopping-malls/:
    get:
      tags:
        - shopping-mall-controller
      summary: Get ShoppingMalls
      operationId: get-all-shopping-malls
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingMall'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    post:
      tags:
        - shopping-mall-controller
      summary: Create ShoppingMall
      operationId: create-shopping-mall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingMallCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingMall'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  '/quarkus-demo-api/shopping-malls/{id}':
    get:
      tags:
        - shopping-mall-controller
      summary: Get ShoppingMall by Id
      operationId: get-shopping-mall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingMall'
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    delete:
      tags:
        - shopping-mall-controller
      summary: Delete ShoppingMall
      operationId: delete-shopping-mall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    put:
      tags:
        - shopping-mall-controller
      summary: Update ShoppingMall
      operationId: update-shopping-mall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingMall'
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
    patch:
      tags:
        - shopping-mall-controller
      summary: Update OperationalStatus of ShoppingMall
      operationId: update-shopping-mall-status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operationalStatus:
                  $ref: '#/components/schemas/OperationalStatus'
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
  /quarkus-demo-api/shopping-mall/notifications/send-alert:
    post:
      tags:
        - shopping-mall-controller
      summary: Send alert to Person list
      operationId: send-alert-to-person-list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertToPersonList'
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:8080'
          description: Person-api
components:
  schemas:
    Person:
      type: object
      title: Person
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int32
        registrationDateTimestamp:
          type: integer
          format: int64
        hobbies:
          type: array
          items:
            $ref: '#/components/schemas/Hobby'
      required:
        - id
        - firstName
        - lastName
        - age
        - registrationDateTimestamp
    Hobby:
      type: object
      title: Hobby
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    PersonCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
        registrationDateTimestamp:
          type: integer
          format: int64
      required:
        - firstName
        - lastName
        - age
        - registrationDateTimestamp
    HobbyCreateRequest:
      type: object
      title: HobbyCreateRequest
      properties:
        name:
          type: string
    ShoppingMall:
      type: object
      title: ShoppingMall
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        hobbies:
          type: array
          items:
            $ref: '#/components/schemas/Hobby'
        location:
          $ref: '#/components/schemas/Location'
        operationalStatus:
          $ref: '#/components/schemas/OperationalStatus'
      required:
        - id
        - name
        - location
    Location:
      type: object
      title: Location
      properties:
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
    OperationalStatus:
      type: string
      enum:
        - OPEN
        - CLOSED
        - UNDER_CONSTRUCTION
        - RENOVATION
      title: OperationalStatus
    ShoppingMallCreateRequest:
      type: object
      title: ShoppingMallCreateRequest
      properties:
        name:
          type: string
        hobbies:
          type: array
          items:
            $ref: '#/components/schemas/Hobby'
        location:
          $ref: '#/components/schemas/Location'
        operationalStatus:
          $ref: '#/components/schemas/OperationalStatus'
      required:
        - name
        - location
    AlertToPersonList:
      type: object
      title: AlertToPersonList
      properties:
        idList:
          type: array
          items:
            type: string
            format: uuid
        message:
          type: string
      required:
        - idList
        - message
